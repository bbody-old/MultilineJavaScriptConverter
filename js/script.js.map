{"version":3,"sources":["script.js"],"names":[],"mappings":"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","file":"script.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n// Constant variables\nconst NEW_LINE = '\\n';\nconst LINE_END = ' +';\nconst STRING_NEW_LINE = '\\\\n';\nconst FINAL_SEMI_COLON = ';';\n// const ESCAPE_CHARACTER = \"\\\\\";\n\n// Space types\nconst TAB = '\\t';\n// const SPACE1 = \" \";\nconst SPACE2 = '  ';\nconst SPACE4 = '    ';\nconst SPACE8 = '        ';\n\nconst TABS = 'tabs';\nconst SPACES_2 = 'space2';\nconst SPACES_4 = 'space4';\nconst SPACES_8 = 'space8';\n\nconst indenter = {\n  'tabs': TAB,\n  'space2': SPACE2,\n  'space4': SPACE4,\n  'space8': SPACE8\n};\n\n// Special characters\nconst DOUBLE_QUOTE = `\"`;\nconst SINGLE_QUOTE = `'`;\nconst BACKTICK = `\\``;\n\n// Escaped special characters\nconst ESCAPED_DOUBLE_QUOTE = '\\\\\"';\nconst ESCAPED_SINGLE_QUOTE = '\\\\\\'';\nconst ESCAPED_BACKTICK = `\\\\\\``;\n\n// Types\nconst ECMA6 = 'ecma6';\nconst ECMA5_SINGLE = 'ecma5single';\nconst ECMA5_DOUBLE = 'ecma5double';\nconst JSON_DOUBLE = 'json';\n\n// Defaults\nconst DEFAULT_STRING_TYPE = ECMA5_DOUBLE;\nconst DEFAULT_VARIABLE_NAME = 'text';\nconst DEFAULT_SPACE_TYPE = 'tabs';\n\n// Escape any backslashes\nconst escapeBackslash = value => {\n  return value.replace(/\\\\/g, '\\\\\\\\');\n};\n\n// Escape any special characters that will effect Javascript\nconst escapeSpecialCharacters = (line, stringType) => {\n  let value = escapeBackslash(line);\n\n  if ((stringType === ECMA5_DOUBLE) || (stringType === JSON_DOUBLE)) {\n    // Escape double quotes\n    value = value.replace(/\"/g, ESCAPED_DOUBLE_QUOTE);\n  } else if (stringType === ECMA5_SINGLE) {\n    // Escape single quotes\n    value = value.replace(/'/g, ESCAPED_SINGLE_QUOTE);\n  } else {\n    // Escape backtick quotes\n    value = value.replace(/`/g, ESCAPED_BACKTICK);\n  }\n\n  return value;\n};\n\n// Return the type of quote based on string type and if it is the end/start\nconst getQuote = (stringType) => {\n  if (stringType === ECMA5_DOUBLE) {\n    return DOUBLE_QUOTE;\n  } else if (stringType === ECMA6) {\n    return BACKTICK;\n  } else if (stringType === JSON_DOUBLE) {\n    return DOUBLE_QUOTE;\n  } else {\n    return SINGLE_QUOTE;\n  }\n};\n\n// Get line of string type\nconst getLine = (stringType, value) => {\n  if (stringType === JSON_DOUBLE) {\n    return `${TAB}${TAB}${DOUBLE_QUOTE}${value}${DOUBLE_QUOTE}`;\n  } else if (stringType === ECMA6) {\n    return value;\n  } else {\n    const quote = getQuote(stringType);\n    return `${quote}${value}${quote}`;\n  }\n};\n\n// Joiner for joining the array\nconst getJoiner = (stringType) => {\n  if (stringType === JSON_DOUBLE) {\n    return `,${NEW_LINE}`;\n  } else if (stringType === ECMA6) {\n    return `${NEW_LINE}`;\n  } else {\n    return `${LINE_END}${NEW_LINE}${TAB}`;\n  }\n};\n\n// Get first line\nconst getStart = (stringType, variableName) => {\n  let buffer = '';\n  if (stringType === JSON_DOUBLE) {\n    variableName = variableName && variableName.length\n      ? variableName : 'output';\n    buffer += `{${NEW_LINE}${TAB}${DOUBLE_QUOTE}`;\n    buffer += variableName;\n    buffer += `${DOUBLE_QUOTE}: [`;\n  } else {\n    if (variableName && variableName.length) {\n      if (stringType === ECMA6) {\n        buffer += `const ${variableName} = \\``;\n      } else {\n        buffer += `var ${variableName} = `;\n      }\n    } else {\n      buffer += TAB;\n      if (stringType === ECMA6) {\n        buffer += BACKTICK;\n      }\n    }\n  }\n  return buffer;\n};\n\n// Get end of line\nconst getEnd = (stringType, semiColon = true) => {\n  let buffer = '';\n\n  if (stringType === JSON_DOUBLE) {\n    return `${TAB}]${NEW_LINE}}`;\n  } else if (stringType === ECMA6) {\n    buffer += `\\``;\n  }\n\n  if (semiColon) {\n    buffer += FINAL_SEMI_COLON;\n  }\n\n  return buffer;\n};\n\n// Convert text to JavaScript Variable\nconst convertText = (variableName, contents, stringType, addNewlines, trim,\n  semiColon, spaces) => {\n  // Output buffer\n  let buffer = getStart(stringType, variableName);\n\n  let arrayCount = 0;\n  let arrayBuffer = [''];\n\n  const lineContents =\n    (typeof contents === 'string') ? contents.split(NEW_LINE) : contents;\n\n  lineContents.forEach((value, count) => {\n    if (trim) {\n      value = value.trim();\n    }\n\n    if (trim && ((!value || !value.length) || (value === NEW_LINE))) {\n      return; // continue\n    }\n\n    value = escapeSpecialCharacters(value, stringType);\n\n    if (addNewlines) {\n      value += STRING_NEW_LINE;\n    }\n\n    arrayBuffer[arrayCount] = getLine(stringType, value);\n\n    arrayCount++;\n  });\n\n  if ((arrayBuffer.length > 0) && (stringType === JSON_DOUBLE)) {\n    buffer += NEW_LINE;\n  }\n\n  buffer += arrayBuffer.join(getJoiner(stringType));\n\n  if ((arrayBuffer.length > 0) && (stringType === JSON_DOUBLE)) {\n    buffer += NEW_LINE;\n  }\n\n  buffer += getEnd(stringType, semiColon);\n  buffer = buffer.replace(/\\t/g, indenter[spaces]);\n\n  return buffer;\n};\n\n// Clear the field with empty string unless a default selection is provided\nconst clearField = (field, defaultSelection = '') => {\n  field.value = defaultSelection !== null &&\n  defaultSelection.toString ? defaultSelection.toString() : '';\n};\n\n// Export so it can be required\n/* istanbul ignore next */\nmodule.exports = {\n  // Constants\n  DEFAULT_STRING_TYPE,\n  DEFAULT_VARIABLE_NAME,\n  DEFAULT_SPACE_TYPE,\n  ECMA5_SINGLE,\n  ECMA5_DOUBLE,\n  ECMA6,\n  JSON_DOUBLE,\n  TABS,\n  SPACES_2,\n  SPACES_4,\n  SPACES_8,\n\n  // Functions\n  escapeBackslash,\n  escapeSpecialCharacters,\n  getQuote,\n  getStart,\n  getEnd,\n  convertText,\n  clearField,\n  getLine,\n  getJoiner\n};\n\n},{}],2:[function(require,module,exports){\nconst stringConverter = require('./converter');\n\nwindow.onChangeStringType = (event) => {\n  const selectedElement = event.value;\n  const noSemiColon = document.getElementById('no-semi-colon-field');\n\n  if (selectedElement === 'json') {\n    noSemiColon.style = 'display: none';\n  } else {\n    noSemiColon.style = 'display: block';\n  }\n};\n\nwindow.convert = () => {\n  // Get input content\n  const text = document.getElementById('text').value;\n\n  // Get the variable name, set default as \"text\"\n  const variableName = document.getElementById('variable-name').value || '';\n\n  // Get the type of string wanted to be output\n  const stringType = document.getElementById('string-type').value ||\n    stringConverter.ECMA5_DOUBLE;\n\n  // Get whether newlines are added\n  const addNewlines = document.getElementById('add-newline').checked;\n\n  // Get whether white spacing needs to be trimmed\n  const trim = document.getElementById('trim-padding').checked;\n\n  // Get whether a semi-colon should be used or not\n  const semiColon = !document.getElementById('no-semi-colon').checked;\n\n  // Get whether a spaces or tabs should be used\n  const spaces = document.getElementById('space-type').value ||\n  stringConverter.TAB;\n\n  // Convert text\n  const converted = stringConverter.convertText(variableName, text, stringType,\n    addNewlines, trim, semiColon, spaces);\n\n  // Write converted text to output box\n  document.getElementById('js-code').value = converted;\n};\n\nwindow.clearAllFields = () => {\n  // Clear all fields\n  stringConverter.clearField(document.getElementById('text'));\n  stringConverter.clearField(document.getElementById('js-code'));\n  stringConverter.clearField(document.getElementById('variable-name'),\n    stringConverter.DEFAULT_VARIABLE_NAME);\n  stringConverter.clearField(document.getElementById('string-type'),\n    stringConverter.DEFAULT_STRING_TYPE);\n  stringConverter.clearField(document.getElementById('space-type'),\n    stringConverter.DEFAULT_SPACE_TYPE);\n  document.getElementById('trim-padding').checked = false;\n  document.getElementById('add-newline').checked = false;\n  document.getElementById('no-semi-colon').checked = false;\n};\n\n},{\"./converter\":1}]},{},[2]);\n"]}